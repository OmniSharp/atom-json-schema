'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CompletionProvider = undefined;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _jsonSchemaService = require('./vscode/plugin/jsonSchemaService');

var _jsonParser = require('./vscode/plugin/jsonParser');

var _jsonCompletion = require('./vscode/plugin/jsonCompletion');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var filter = require('fuzzaldrin').filter;

var jsonSchemaService = new _jsonSchemaService.JSONSchemaService();
var jsonCompletion = new _jsonCompletion.JSONCompletion(jsonSchemaService, []);
function fixSnippet(snippet, options, type) {
    var t = _lodash2.default.trim(snippet);
    if (_lodash2.default.startsWith(t, '{') || _lodash2.default.startsWith(t, '"') || _lodash2.default.endsWith(t, '}') || _lodash2.default.endsWith(t, '"') || _lodash2.default.endsWith(t, ',')) return snippet;
    if (!options.hasLeadingQuote) snippet = '"' + snippet;
    if (!options.hasTrailingQuote && !_lodash2.default.endsWith(snippet, '.')) snippet = snippet + '"';
    if (type === "string") {
        snippet = snippet += ': ""';
    } else if (type === "object") {
        snippet = snippet += ': {}';
    } else if (type === "array") {
        snippet = snippet += ': []';
    }
    return snippet;
}
function makeSuggestion(item, options) {
    var description = item.description,
        leftLabel = item.type.substr(0, 1),
        type = 'variable';
    return {
        _search: item.key,
        text: item.key,
        snippet: fixSnippet(item.key, options, item.type),
        type: type,
        displayText: item.key,
        className: 'autocomplete-json-schema',
        description: description
    };
}
function renderReturnType(returnType) {
    if (returnType === null) {
        return;
    }
    return 'Returns: ' + returnType;
}
function getSuggestions(options) {
    return jsonCompletion.doSuggest(options.editor, options.bufferPosition, (0, _jsonParser.parse)(options.editor.getText())).then(function (x) {
        return x.items;
    });
}
var providers = [].concat(require('./providers/npm-provider')).concat(require('./providers/bower-provider'));
var CompletionProvider = exports.CompletionProvider = {
    selector: '.source.json',
    inclusionPriority: 2,
    excludeLowerPriority: false,
    getSuggestions: getSuggestions,
    registerProvider: function registerProvider(provider) {
        providers.push(provider);
    },
    onDidInsertSuggestion: function onDidInsertSuggestion(_ref) {
        var editor = _ref.editor;
        var suggestion = _ref.suggestion;

        jsonCompletion.doResolve(suggestion).then(function () {
            if (_lodash2.default.endsWith(suggestion.text, '.')) {
                _lodash2.default.defer(function () {
                    return atom.commands.dispatch(atom.views.getView(editor), "autocomplete-plus:activate");
                });
            }
        });
    },
    dispose: function dispose() {}
};
//# sourceMappingURL=data:application/json;base64,
