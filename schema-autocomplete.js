'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CompletionProvider = undefined;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _getRanges2 = require('./helpers/get-ranges');

var _schemaProvider = require('./schema-provider');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var filter = require('fuzzaldrin').filter;

function fixSnippet(snippet, options, type) {
    var t = _lodash2.default.trim(snippet);
    if (_lodash2.default.startsWith(t, '{') || _lodash2.default.startsWith(t, '"') || _lodash2.default.endsWith(t, '}') || _lodash2.default.endsWith(t, '"') || _lodash2.default.endsWith(t, ',')) return snippet;
    if (!options.hasLeadingQuote) snippet = '"' + snippet;
    if (!options.hasTrailingQuote && !_lodash2.default.endsWith(snippet, '.')) snippet = snippet + '"';
    if (type === "string") {
        snippet = snippet += ': ""';
    } else if (type === "object") {
        snippet = snippet += ': {}';
    } else if (type === "array") {
        snippet = snippet += ': []';
    }
    return snippet;
}
function makeSuggestion(item, options) {
    var description = item.description,
        leftLabel = item.type.substr(0, 1),
        type = 'variable';
    return {
        _search: item.key,
        text: item.key,
        snippet: fixSnippet(item.key, options, item.type),
        type: type,
        displayText: item.key,
        className: 'autocomplete-json-schema',
        description: description
    };
}
function renderReturnType(returnType) {
    if (returnType === null) {
        return;
    }
    return 'Returns: ' + returnType;
}
function schemaGet(schema, path) {
    var p = (path || '').split('/');
    var rootSchema = schema;
    while (p.length) {
        var s = p.shift();
        if (schema.properties && schema.properties[s]) {
            schema = schema.properties[s];
        } else if (schema.additionalProperties) {
            schema = schema.additionalProperties;
        }
        if (schema.$ref) {
            var childPath = _lodash2.default.trim(schema.$ref, '/#').split('/').join('.');
            schema = _lodash2.default.get(rootSchema, childPath);
        }
    }
    return schema;
}
function getSuggestions(options) {
    var line = options.editor.getBuffer().getLines()[options.bufferPosition.row];
    var hasLeadingQuote = false;
    for (var i = options.bufferPosition.column; i >= 0; i--) {
        var char = line[i];
        if (char === ',' || char === '}' || char === ':') {
            break;
        }
        if (char === '"') {
            hasLeadingQuote = true;
            break;
        }
    }
    var hasTrailingQuote = false;
    for (var i = options.bufferPosition.column; i < line.length; i++) {
        var _char = line[i];
        if (_char === ':' || _char === '}' || _char === ',' || _char === '{') {
            break;
        }
        if (_char === '"') {
            hasTrailingQuote = true;
            break;
        }
    }
    var prefix = options.prefix;
    try {
        var cursor = options.editor.getLastCursor();
        var editor = options.editor;
        prefix = editor.getTextInBufferRange(cursor.getCurrentWordBufferRange({ wordRegex: /^[\t ]*$|[^\s\/\\\(\)"':,\;<>~!@#\$%\^&\*\|\+=\[\]\{\}`\?]+|[\/\\\(\)"':,\;<>~!@#\$%\^&\*\|\+=\[\]\{\}`\?]+/ }));
    } catch (e) {}
    prefix = _lodash2.default.trim(prefix, ':{}," ');
    var context = (0, _getRanges2.getPath)(options.editor, function (line, column) {
        return options.bufferPosition.row === line && options.bufferPosition.column === column + 1;
    });

    var _getRanges = (0, _getRanges2.getRanges)(options.editor);

    var ranges = _getRanges.ranges;
    var objectPaths = _getRanges.objectPaths;

    var existingKeys = (0, _lodash2.default)(_lodash2.default.keys(ranges)).filter(function (z) {
        return _lodash2.default.startsWith(z + '/', context.path);
    }).filter(function (z) {
        return z && z.indexOf('/') === -1;
    }).value();
    var p = _schemaProvider.schemaProvider.getSchemaForEditor(options.editor).flatMap(function (schema) {
        return schema.content;
    }).map(function (schema) {
        var p = (context.path || '').split('/');
        var rootSchema = schema;
        var parentSchema;
        while (p.length) {
            var lastSchema = schema;
            var s = p.shift();
            if (schema.properties && schema.properties[s]) {
                schema = schema.properties[s];
            } else if (schema.additionalProperties) {
                schema = schema.additionalProperties;
            } else if (schema !== rootSchema) {
                schema = {};
            }
            if (schema.$ref) {
                var childPath = _lodash2.default.trim(schema.$ref, '/#').split('/').join('.');
                schema = _lodash2.default.get(rootSchema, childPath);
            }
        }
        var inferedType = "";
        if (typeof schema.type === "string" && schema.type === "object") {
            inferedType = "object";
        }
        var objectPath = _lodash2.default.find(objectPaths, function (value, key) {
            return key === context.path;
        });
        if (objectPath && _lodash2.default.isArray(schema.type) && _lodash2.default.includes(schema.type, "object") && (options.bufferPosition.row == objectPath.line && options.bufferPosition.column + 1 > objectPath.column || options.bufferPosition.row > objectPath.line)) {
            inferedType = "object";
        }
        if (schema.enum && schema.enum.length) {
            return schema.enum.map(function (property) {
                return { key: property, type: 'enum', description: '' };
            });
        }
        if (inferedType === "object" && schema.properties && _lodash2.default.some(schema.properties)) {
            return _lodash2.default.keys(schema.properties).filter(function (z) {
                return !_lodash2.default.includes(existingKeys, z);
            }).map(function (property) {
                var propertySchema = schema.properties[property];
                return { key: property, type: typeof propertySchema.type === "string" ? propertySchema.type : 'property', description: propertySchema.description };
            });
        }
        var types = [];
        if (typeof schema.type === "string") {
            types = [schema.type];
        } else if (_lodash2.default.isArray(types)) {
            types = schema.type || [];
        }
        if (types.length > 1) {
            return _lodash2.default.map(types, function (type) {
                if (type === "string") {
                    return { key: '""', type: "value", description: '' };
                } else if (type === "object") {
                    var res = {};
                    _lodash2.default.each(schema.properties, function (value, key) {
                        if (value.type === "string") res[key] = value.default || '';
                    });
                    return { key: JSON.stringify(res, null, options.editor.getTabLength()), type: "value", description: '' };
                }
            });
        }
        return [];
    }).defaultIfEmpty([]).toPromise();
    var search = prefix;
    if (search === ".") search = "";
    if (search) p = p.then(function (s) {
        return filter(s, search, { key: 'key' });
    });
    var baseSuggestions = p.then(function (response) {
        return response.map(function (s) {
            return makeSuggestion(s, { replacementPrefix: prefix, hasLeadingQuote: hasLeadingQuote, hasTrailingQuote: hasTrailingQuote });
        });
    });
    if (providers.length) {
        var workingOptions = _lodash2.default.defaults({ prefix: prefix, replacementPrefix: prefix }, context, options);
        var workingProviders = _lodash2.default.filter(providers, function (z) {
            return _lodash2.default.includes(z.fileMatchs, options.editor.getBuffer().getBaseName()) && z.pathMatch(context.path);
        }).map(function (z) {
            return z.getSuggestions(workingOptions).then(function (suggestions) {
                return _lodash2.default.each(suggestions, function (s) {
                    return s.snippet = fixSnippet(s.snippet, { hasLeadingQuote: hasLeadingQuote, hasTrailingQuote: hasTrailingQuote }, 'other');
                });
            });
        });
        if (workingProviders.length) {
            return Promise.all(workingProviders.concat([baseSuggestions])).then(function (items) {
                return _lodash2.default.flatten(items);
            });
        }
    }
    return baseSuggestions;
}
var providers = [].concat(require('./providers/npm-provider')).concat(require('./providers/bower-provider'));
var CompletionProvider = exports.CompletionProvider = {
    selector: '.source.json',
    inclusionPriority: 2,
    excludeLowerPriority: false,
    getSuggestions: getSuggestions,
    registerProvider: function registerProvider(provider) {
        providers.push(provider);
    },
    onDidInsertSuggestion: function onDidInsertSuggestion(_ref) {
        var editor = _ref.editor;
        var suggestion = _ref.suggestion;

        if (_lodash2.default.endsWith(suggestion.text, '.')) {
            _lodash2.default.defer(function () {
                return atom.commands.dispatch(atom.views.getView(editor), "autocomplete-plus:activate");
            });
        }
    },
    dispose: function dispose() {}
};
//# sourceMappingURL=data:application/json;base64,
