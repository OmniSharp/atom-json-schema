"use strict";

var _lodash = require("lodash");

var _ = _interopRequireWildcard(_lodash);

var _rxjs = require("rxjs");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var fetch = require('node-fetch');
var filter = require('fuzzaldrin').filter;
function search(text) {
    return _rxjs.Observable.fromPromise(fetch("https://skimdb.npmjs.com/registry/_design/app/_view/browseAll?group_level=1&limit=100&start_key=%5B%22" + encodeURIComponent(text) + "%22,%7B%7D%5D&end_key=%5B%22" + encodeURIComponent(text) + "z%22,%7B%7D%5D").then(function (res) {
        return res.json();
    })).flatMap(function (z) {
        return _rxjs.Observable.from(z.rows);
    });
}
function searchPackage(text, name) {
    return _rxjs.Observable.fromPromise(fetch("http://registry.npmjs.org/" + name + "/latest").then(function (res) {
        return res.json();
    }));
}
function makeSuggestion(item) {
    var type = 'package';
    return {
        _search: item.key,
        text: item.key,
        snippet: item.key,
        type: type,
        displayText: item.key,
        className: 'autocomplete-json-schema'
    };
}
var packageName = {
    getSuggestions: function getSuggestions(options) {
        if (!options.replacementPrefix) return Promise.resolve([]);
        return search(options.replacementPrefix).map(makeSuggestion).toArray().toPromise();
    },

    fileMatchs: ['package.json'],
    pathMatch: function pathMatch(path) {
        return path === "dependencies" || path === "devDependencies";
    },
    dispose: function dispose() {}
};
var packageVersion = {
    getSuggestions: function getSuggestions(options) {
        var name = options.path.split('/');
        return searchPackage(options.replacementPrefix, name[name.length - 1]).map(function (z) {
            return { key: "^" + z.version };
        }).map(makeSuggestion).toArray().toPromise();
    },

    fileMatchs: ['package.json'],
    pathMatch: function pathMatch(path) {
        return _.startsWith(path, "dependencies/") || _.startsWith(path, "devDependencies/");
    },
    dispose: function dispose() {}
};
var providers = [packageName, packageVersion];
module.exports = providers;
//# sourceMappingURL=data:application/json;base64,
