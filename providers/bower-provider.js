'use strict';

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _rxjs = require('rxjs');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var fetch = require('node-fetch');
function search(text) {
    var $get = fetch('https://bower.herokuapp.com/packages/search/' + text);
    return _rxjs.Observable.fromPromise($get.then(function (res) {
        return res.json();
    })).flatMap(function (x) {
        return x;
    });
}
function searchPackage(text, name) {
    var $get = fetch('https://bower.herokuapp.com/packages/' + name);
    var toJson = function toJson(res) {
        return res.json();
    };
    var getReleases = function getReleases(res) {
        if (!_lodash2.default.includes(res.url, 'github')) {
            return;
        }
        var url = res.url.replace('.git', '/tags').replace('git://github.com/', 'https://api.github.com/repos/');
        return fetch(url);
    };
    var getTags = function getTags(rel) {
        return rel.name.replace('v', '');
    };
    return _rxjs.Observable.fromPromise($get.then(toJson).then(getReleases).then(function (res) {
        return res.json();
    })).flatMap(function (x) {
        return x;
    }).map(getTags);
}
function makeSuggestion(item) {
    var type = 'package';
    return {
        _search: item.name,
        snippet: item.name,
        type: type,
        displayText: item.name,
        className: 'autocomplete-json-schema'
    };
}
var packageName = {
    getSuggestions: function getSuggestions(options) {
        return search(options.replacementPrefix).filter(function (r) {
            return _lodash2.default.includes(r.name, options.replacementPrefix);
        }).map(makeSuggestion).toArray().toPromise();
    },

    fileMatchs: ['bower.json'],
    pathMatch: function pathMatch(path) {
        return path === "dependencies";
    },
    dispose: function dispose() {}
};
var packageVersion = {
    getSuggestions: function getSuggestions(options) {
        var name = options.path.split('/');
        return searchPackage(options.replacementPrefix, name[name.length - 1]).map(function (tag) {
            return { name: '^' + tag };
        }).map(makeSuggestion).toArray().toPromise();
    },

    fileMatchs: ['bower.json'],
    pathMatch: function pathMatch(path) {
        return _lodash2.default.startsWith(path, "dependencies/");
    },
    dispose: function dispose() {}
};
var providers = [packageName, packageVersion];
module.exports = providers;
//# sourceMappingURL=data:application/json;base64,
