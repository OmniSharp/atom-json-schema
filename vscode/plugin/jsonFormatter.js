'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.format = format;

var _jsoncParser = require('jsonc-parser');

var _jsoncParser2 = _interopRequireDefault(_jsoncParser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function format(document, range, options) {
    var documentText = document.getText();
    var initialIndentLevel = void 0;
    var value = void 0;
    var rangeOffset = void 0;
    if (range) {
        var startPosition = Position.create(range.start.line, 0);
        rangeOffset = document.offsetAt(startPosition);
        var endOffset = document.offsetAt(Position.create(range.end.line + 1, 0));
        var endLineStart = document.offsetAt(Position.create(range.end.line, 0));
        while (endOffset > endLineStart && isEOL(documentText, endOffset - 1)) {
            endOffset--;
        }
        range = new Range(startPosition, document.positionAt(endOffset));
        value = documentText.substring(rangeOffset, endOffset);
        initialIndentLevel = computeIndentLevel(value, 0, options);
    } else {
        value = documentText;
        range = new Range(Position.create(0, 0), document.positionAt(value.length));
        initialIndentLevel = 0;
        rangeOffset = 0;
    }
    var eol = getEOL(document);
    var lineBreak = false;
    var indentLevel = 0;
    var indentValue = void 0;
    if (options.insertSpaces) {
        indentValue = repeat(' ', options.tabSize);
    } else {
        indentValue = '\t';
    }
    var scanner = _jsoncParser2.default.createScanner(value, false);
    function newLineAndIndent() {
        return eol + repeat(indentValue, initialIndentLevel + indentLevel);
    }
    function scanNext() {
        var token = scanner.scan();
        lineBreak = false;
        while (token === _jsoncParser2.default.SyntaxKind.Trivia || token === _jsoncParser2.default.SyntaxKind.LineBreakTrivia) {
            lineBreak = lineBreak || token === _jsoncParser2.default.SyntaxKind.LineBreakTrivia;
            token = scanner.scan();
        }
        return token;
    }
    var editOperations = [];
    function addEdit(text, startOffset, endOffset) {
        if (documentText.substring(startOffset, endOffset) !== text) {
            var replaceRange = new Range(document.positionAt(startOffset), document.positionAt(endOffset));
            editOperations.push(TextEdit.replace(replaceRange, text));
        }
    }
    var firstToken = scanNext();
    if (firstToken !== _jsoncParser2.default.SyntaxKind.EOF) {
        var firstTokenStart = scanner.getTokenOffset() + rangeOffset;
        var initialIndent = repeat(indentValue, initialIndentLevel);
        addEdit(initialIndent, rangeOffset, firstTokenStart);
    }
    while (firstToken !== _jsoncParser2.default.SyntaxKind.EOF) {
        var firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + rangeOffset;
        var secondToken = scanNext();
        var replaceContent = '';
        while (!lineBreak && (secondToken === _jsoncParser2.default.SyntaxKind.LineCommentTrivia || secondToken === _jsoncParser2.default.SyntaxKind.BlockCommentTrivia)) {
            var commentTokenStart = scanner.getTokenOffset() + rangeOffset;
            addEdit(' ', firstTokenEnd, commentTokenStart);
            firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + rangeOffset;
            replaceContent = secondToken === _jsoncParser2.default.SyntaxKind.LineCommentTrivia ? newLineAndIndent() : '';
            secondToken = scanNext();
        }
        if (secondToken === _jsoncParser2.default.SyntaxKind.CloseBraceToken) {
            if (firstToken !== _jsoncParser2.default.SyntaxKind.OpenBraceToken) {
                indentLevel--;
                replaceContent = newLineAndIndent();
            }
        } else if (secondToken === _jsoncParser2.default.SyntaxKind.CloseBracketToken) {
            if (firstToken !== _jsoncParser2.default.SyntaxKind.OpenBracketToken) {
                indentLevel--;
                replaceContent = newLineAndIndent();
            }
        } else {
            switch (firstToken) {
                case _jsoncParser2.default.SyntaxKind.OpenBracketToken:
                case _jsoncParser2.default.SyntaxKind.OpenBraceToken:
                    indentLevel++;
                    replaceContent = newLineAndIndent();
                    break;
                case _jsoncParser2.default.SyntaxKind.CommaToken:
                case _jsoncParser2.default.SyntaxKind.LineCommentTrivia:
                    replaceContent = newLineAndIndent();
                    break;
                case _jsoncParser2.default.SyntaxKind.BlockCommentTrivia:
                    if (lineBreak) {
                        replaceContent = newLineAndIndent();
                    } else {
                        replaceContent = ' ';
                    }
                    break;
                case _jsoncParser2.default.SyntaxKind.ColonToken:
                    replaceContent = ' ';
                    break;
                case _jsoncParser2.default.SyntaxKind.NullKeyword:
                case _jsoncParser2.default.SyntaxKind.TrueKeyword:
                case _jsoncParser2.default.SyntaxKind.FalseKeyword:
                case _jsoncParser2.default.SyntaxKind.NumericLiteral:
                    if (secondToken === _jsoncParser2.default.SyntaxKind.NullKeyword || secondToken === _jsoncParser2.default.SyntaxKind.FalseKeyword || secondToken === _jsoncParser2.default.SyntaxKind.NumericLiteral) {
                        replaceContent = ' ';
                    }
                    break;
            }
            if (lineBreak && (secondToken === _jsoncParser2.default.SyntaxKind.LineCommentTrivia || secondToken === _jsoncParser2.default.SyntaxKind.BlockCommentTrivia)) {
                replaceContent = newLineAndIndent();
            }
        }
        var secondTokenStart = scanner.getTokenOffset() + rangeOffset;
        addEdit(replaceContent, firstTokenEnd, secondTokenStart);
        firstToken = secondToken;
    }
    return editOperations;
}
function repeat(s, count) {
    var result = '';
    for (var i = 0; i < count; i++) {
        result += s;
    }
    return result;
}
function computeIndentLevel(content, offset, options) {
    var i = 0;
    var nChars = 0;
    var tabSize = options.tabSize || 4;
    while (i < content.length) {
        var ch = content.charAt(i);
        if (ch === ' ') {
            nChars++;
        } else if (ch === '\t') {
            nChars += tabSize;
        } else {
            break;
        }
        i++;
    }
    return Math.floor(nChars / tabSize);
}
function getEOL(document) {
    var text = document.getText();
    if (document.lineCount > 1) {
        var to = document.offsetAt(Position.create(1, 0));
        var from = to;
        while (from > 0 && isEOL(text, from - 1)) {
            from--;
        }
        return text.substr(from, to - from);
    }
    return '\n';
}
function isEOL(text, offset) {
    return '\r\n'.indexOf(text.charAt(offset)) !== -1;
}
//# sourceMappingURL=data:application/json;base64,
