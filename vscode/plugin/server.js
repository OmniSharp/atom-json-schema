'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _requestLight = require('request-light');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _uri = require('./utils/uri');

var _uri2 = _interopRequireDefault(_uri);

var _strings = require('./utils/strings');

var _strings2 = _interopRequireDefault(_strings);

var _jsonSchemaService = require('./jsonSchemaService');

var _jsonParser = require('./jsonParser');

var _jsonCompletion = require('./jsonCompletion');

var _jsonHover = require('./jsonHover');

var _jsonDocumentSymbols = require('./jsonDocumentSymbols');

var _jsonFormatter = require('./jsonFormatter');

var _configuration = require('./configuration');

var _projectJSONContribution = require('./jsoncontributions/projectJSONContribution');

var _globPatternContribution = require('./jsoncontributions/globPatternContribution');

var _fileAssociationContribution = require('./jsoncontributions/fileAssociationContribution');

var _vscodeNls = require('vscode-nls');

var nls = _interopRequireWildcard(_vscodeNls);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

nls.config(process.env['VSCODE_NLS_CONFIG']);
var TelemetryNotification;
(function (TelemetryNotification) {
    TelemetryNotification.type = { get method() {
            return 'telemetry';
        } };
})(TelemetryNotification || (TelemetryNotification = {}));
var SchemaAssociationNotification;
(function (SchemaAssociationNotification) {
    SchemaAssociationNotification.type = { get method() {
            return 'json/schemaAssociations';
        } };
})(SchemaAssociationNotification || (SchemaAssociationNotification = {}));
var VSCodeContentRequest;
(function (VSCodeContentRequest) {
    VSCodeContentRequest.type = { get method() {
            return 'vscode/content';
        } };
})(VSCodeContentRequest || (VSCodeContentRequest = {}));
var connection = createConnection(new IPCMessageReader(process), new IPCMessageWriter(process));
var documents = new TextDocuments();
documents.listen(connection);
var filesAssociationContribution = new _fileAssociationContribution.FileAssociationContribution();
var workspaceRoot = void 0;
connection.onInitialize(function (params) {
    workspaceRoot = _uri2.default.parse(params.rootPath);
    filesAssociationContribution.setLanguageIds(params.initializationOptions.languageIds);
    return {
        capabilities: {
            textDocumentSync: documents.syncKind,
            completionProvider: { resolveProvider: true },
            hoverProvider: true,
            documentSymbolProvider: true,
            documentRangeFormattingProvider: true,
            documentFormattingProvider: true
        }
    };
});
var workspaceContext = {
    toResource: function toResource(workspaceRelativePath) {
        if (typeof workspaceRelativePath === 'string' && workspaceRoot) {
            return _uri2.default.file(_path2.default.join(workspaceRoot.fsPath, workspaceRelativePath)).toString();
        }
        return workspaceRelativePath;
    }
};
var telemetry = {
    log: function log(key, data) {
        connection.sendNotification(TelemetryNotification.type, { key: key, data: data });
    }
};
var request = function request(options) {
    if (_strings2.default.startsWith(options.url, 'file://')) {
        var _ret = function () {
            var fsPath = _uri2.default.parse(options.url).fsPath;
            return {
                v: new Promise(function (c, e) {
                    _fs2.default.readFile(fsPath, 'UTF-8', function (err, result) {
                        err ? e({ responseText: '', status: 404 }) : c({ responseText: result.toString(), status: 200 });
                    });
                })
            };
        }();

        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
    } else if (_strings2.default.startsWith(options.url, 'vscode://')) {
        return connection.sendRequest(VSCodeContentRequest.type, options.url).then(function (responseText) {
            return {
                responseText: responseText,
                status: 200
            };
        }, function (error) {
            return {
                responseText: error.message,
                status: 404
            };
        });
    }
    return (0, _requestLight.xhr)(options);
};
var contributions = [new _projectJSONContribution.ProjectJSONContribution(), new _globPatternContribution.GlobPatternContribution(), filesAssociationContribution];
var jsonSchemaService = new _jsonSchemaService.JSONSchemaService(request, workspaceContext, telemetry);
jsonSchemaService.setSchemaContributions(_configuration.schemaContributions);
var jsonCompletion = new _jsonCompletion.JSONCompletion(jsonSchemaService, connection.console, contributions);
var jsonHover = new _jsonHover.JSONHover(jsonSchemaService, contributions);
var jsonDocumentSymbols = new _jsonDocumentSymbols.JSONDocumentSymbols();
documents.onDidChangeContent(function (change) {
    validateTextDocument(change.document);
});
var jsonConfigurationSettings = void 0;
var schemaAssociations = void 0;
connection.onDidChangeConfiguration(function (change) {
    var settings = change.settings;
    (0, _requestLight.configure)(settings.http && settings.http.proxy, settings.http && settings.http.proxyStrictSSL);
    jsonConfigurationSettings = settings.json && settings.json.schemas;
    updateConfiguration();
});
connection.onNotification(SchemaAssociationNotification.type, function (associations) {
    schemaAssociations = associations;
    updateConfiguration();
});
function updateConfiguration() {
    jsonSchemaService.clearExternalSchemas();
    if (schemaAssociations) {
        for (var pattern in schemaAssociations) {
            var association = schemaAssociations[pattern];
            if (Array.isArray(association)) {
                association.forEach(function (url) {
                    jsonSchemaService.registerExternalSchema(url, [pattern]);
                });
            }
        }
    }
    if (jsonConfigurationSettings) {
        jsonConfigurationSettings.forEach(function (schema) {
            if (schema.fileMatch) {
                var url = schema.url;
                if (!url && schema.schema) {
                    url = schema.schema.id;
                    if (!url) {
                        url = 'vscode://schemas/custom/' + encodeURIComponent(schema.fileMatch.join('&'));
                    }
                }
                if (!_strings2.default.startsWith(url, 'http://') && !_strings2.default.startsWith(url, 'https://') && !_strings2.default.startsWith(url, 'file://')) {
                    var resourceURL = workspaceContext.toResource(url);
                    if (resourceURL) {
                        url = resourceURL.toString();
                    }
                }
                if (url) {
                    jsonSchemaService.registerExternalSchema(url, schema.fileMatch, schema.schema);
                }
            }
        });
    }
    documents.all().forEach(validateTextDocument);
}
function validateTextDocument(textDocument) {
    if (textDocument.getText().length === 0) {
        connection.sendDiagnostics({ uri: textDocument.uri, diagnostics: [] });
        return;
    }
    var jsonDocument = getJSONDocument(textDocument);
    jsonSchemaService.getSchemaForResource(textDocument.uri, jsonDocument).then(function (schema) {
        if (schema) {
            if (schema.errors.length && jsonDocument.root) {
                var astRoot = jsonDocument.root;
                var property = astRoot.type === 'object' ? astRoot.getFirstProperty('$schema') : null;
                if (property) {
                    var node = property.value || property;
                    jsonDocument.warnings.push({ location: { start: node.start, end: node.end }, message: schema.errors[0] });
                } else {
                    jsonDocument.warnings.push({ location: { start: astRoot.start, end: astRoot.start + 1 }, message: schema.errors[0] });
                }
            } else {
                jsonDocument.validate(schema.schema);
            }
        }
        var diagnostics = [];
        var added = {};
        jsonDocument.errors.concat(jsonDocument.warnings).forEach(function (error, idx) {
            var signature = error.location.start + ' ' + error.location.end + ' ' + error.message;
            if (!added[signature]) {
                added[signature] = true;
                var range = {
                    start: textDocument.positionAt(error.location.start),
                    end: textDocument.positionAt(error.location.end)
                };
                diagnostics.push({
                    severity: idx >= jsonDocument.errors.length ? DiagnosticSeverity.Warning : DiagnosticSeverity.Error,
                    range: range,
                    message: error.message
                });
            }
        });
        connection.sendDiagnostics({ uri: textDocument.uri, diagnostics: diagnostics });
    });
}
connection.onDidChangeWatchedFiles(function (change) {
    var hasChanges = false;
    change.changes.forEach(function (c) {
        if (jsonSchemaService.onResourceChange(c.uri)) {
            hasChanges = true;
        }
    });
    if (hasChanges) {
        documents.all().forEach(validateTextDocument);
    }
});
function getJSONDocument(document) {
    return (0, _jsonParser.parse)(document.getText());
}
connection.onCompletion(function (textDocumentPosition) {
    var document = documents.get(textDocumentPosition.uri);
    var jsonDocument = getJSONDocument(document);
    return jsonCompletion.doSuggest(document, textDocumentPosition, jsonDocument);
});
connection.onCompletionResolve(function (item) {
    return jsonCompletion.doResolve(item);
});
connection.onHover(function (textDocumentPosition) {
    var document = documents.get(textDocumentPosition.uri);
    var jsonDocument = getJSONDocument(document);
    return jsonHover.doHover(document, textDocumentPosition, jsonDocument);
});
connection.onDocumentSymbol(function (textDocumentIdentifier) {
    var document = documents.get(textDocumentIdentifier.uri);
    var jsonDocument = getJSONDocument(document);
    return jsonDocumentSymbols.compute(document, jsonDocument);
});
connection.onDocumentFormatting(function (formatParams) {
    var document = documents.get(formatParams.textDocument.uri);
    return (0, _jsonFormatter.format)(document, null, formatParams.options);
});
connection.onDocumentRangeFormatting(function (formatParams) {
    var document = documents.get(formatParams.textDocument.uri);
    return (0, _jsonFormatter.format)(document, formatParams.range, formatParams.options);
});
connection.listen();
//# sourceMappingURL=data:application/json;base64,
