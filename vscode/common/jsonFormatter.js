'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.applyEdit = applyEdit;
exports.applyEdits = applyEdits;
exports.format = format;

var _json = require('./json');

var _json2 = _interopRequireDefault(_json);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function applyEdit(text, edit) {
    return text.substring(0, edit.offset) + edit.content + text.substring(edit.offset + edit.length);
}
function applyEdits(text, edits) {
    for (var i = edits.length - 1; i >= 0; i--) {
        text = applyEdit(text, edits[i]);
    }
    return text;
}
function format(documentText, range, options) {
    var initialIndentLevel = void 0;
    var value = void 0;
    var rangeStart = void 0;
    var rangeEnd = void 0;
    if (range) {
        rangeStart = range.offset;
        rangeEnd = rangeStart + range.length;
        while (rangeStart > 0 && !isEOL(documentText, rangeStart - 1)) {
            rangeStart--;
        }
        var _scanner = _json2.default.createScanner(documentText, true);
        _scanner.setPosition(rangeEnd);
        _scanner.scan();
        rangeEnd = _scanner.getPosition();
        value = documentText.substring(rangeStart, rangeEnd);
        initialIndentLevel = computeIndentLevel(value, 0, options);
    } else {
        value = documentText;
        rangeStart = 0;
        rangeEnd = documentText.length;
        initialIndentLevel = 0;
    }
    var eol = getEOL(options, documentText);
    var lineBreak = false;
    var indentLevel = 0;
    var indentValue = void 0;
    if (options.insertSpaces) {
        indentValue = repeat(' ', options.tabSize);
    } else {
        indentValue = '\t';
    }
    var scanner = _json2.default.createScanner(value, false);
    function newLineAndIndent() {
        return eol + repeat(indentValue, initialIndentLevel + indentLevel);
    }
    function scanNext() {
        var token = scanner.scan();
        lineBreak = false;
        while (token === _json2.default.SyntaxKind.Trivia || token === _json2.default.SyntaxKind.LineBreakTrivia) {
            lineBreak = lineBreak || token === _json2.default.SyntaxKind.LineBreakTrivia;
            token = scanner.scan();
        }
        return token;
    }
    var editOperations = [];
    function addEdit(text, startOffset, endOffset) {
        if (documentText.substring(startOffset, endOffset) !== text) {
            editOperations.push({ offset: startOffset, length: endOffset - startOffset, content: text });
        }
    }
    var firstToken = scanNext();
    if (firstToken !== _json2.default.SyntaxKind.EOF) {
        var firstTokenStart = scanner.getTokenOffset() + rangeStart;
        var initialIndent = repeat(indentValue, initialIndentLevel);
        addEdit(initialIndent, rangeStart, firstTokenStart);
    }
    while (firstToken !== _json2.default.SyntaxKind.EOF) {
        var firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + rangeStart;
        var secondToken = scanNext();
        var replaceContent = '';
        while (!lineBreak && (secondToken === _json2.default.SyntaxKind.LineCommentTrivia || secondToken === _json2.default.SyntaxKind.BlockCommentTrivia)) {
            var commentTokenStart = scanner.getTokenOffset() + rangeStart;
            addEdit(' ', firstTokenEnd, commentTokenStart);
            firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + rangeStart;
            replaceContent = secondToken === _json2.default.SyntaxKind.LineCommentTrivia ? newLineAndIndent() : '';
            secondToken = scanNext();
        }
        if (secondToken === _json2.default.SyntaxKind.CloseBraceToken) {
            if (firstToken !== _json2.default.SyntaxKind.OpenBraceToken) {
                indentLevel--;
                replaceContent = newLineAndIndent();
            }
        } else if (secondToken === _json2.default.SyntaxKind.CloseBracketToken) {
            if (firstToken !== _json2.default.SyntaxKind.OpenBracketToken) {
                indentLevel--;
                replaceContent = newLineAndIndent();
            }
        } else if (secondToken !== _json2.default.SyntaxKind.EOF) {
            switch (firstToken) {
                case _json2.default.SyntaxKind.OpenBracketToken:
                case _json2.default.SyntaxKind.OpenBraceToken:
                    indentLevel++;
                    replaceContent = newLineAndIndent();
                    break;
                case _json2.default.SyntaxKind.CommaToken:
                case _json2.default.SyntaxKind.LineCommentTrivia:
                    replaceContent = newLineAndIndent();
                    break;
                case _json2.default.SyntaxKind.BlockCommentTrivia:
                    if (lineBreak) {
                        replaceContent = newLineAndIndent();
                    } else {
                        replaceContent = ' ';
                    }
                    break;
                case _json2.default.SyntaxKind.ColonToken:
                    replaceContent = ' ';
                    break;
                case _json2.default.SyntaxKind.NullKeyword:
                case _json2.default.SyntaxKind.TrueKeyword:
                case _json2.default.SyntaxKind.FalseKeyword:
                case _json2.default.SyntaxKind.NumericLiteral:
                    if (secondToken === _json2.default.SyntaxKind.NullKeyword || secondToken === _json2.default.SyntaxKind.FalseKeyword || secondToken === _json2.default.SyntaxKind.NumericLiteral) {
                        replaceContent = ' ';
                    }
                    break;
            }
            if (lineBreak && (secondToken === _json2.default.SyntaxKind.LineCommentTrivia || secondToken === _json2.default.SyntaxKind.BlockCommentTrivia)) {
                replaceContent = newLineAndIndent();
            }
        }
        var secondTokenStart = scanner.getTokenOffset() + rangeStart;
        addEdit(replaceContent, firstTokenEnd, secondTokenStart);
        firstToken = secondToken;
    }
    return editOperations;
}
function repeat(s, count) {
    var result = '';
    for (var i = 0; i < count; i++) {
        result += s;
    }
    return result;
}
function computeIndentLevel(content, offset, options) {
    var i = 0;
    var nChars = 0;
    var tabSize = options.tabSize || 4;
    while (i < content.length) {
        var ch = content.charAt(i);
        if (ch === ' ') {
            nChars++;
        } else if (ch === '\t') {
            nChars += tabSize;
        } else {
            break;
        }
        i++;
    }
    return Math.floor(nChars / tabSize);
}
function getEOL(options, text) {
    for (var i = 0; i < text.length; i++) {
        var ch = text.charAt(i);
        if (ch === '\r') {
            if (i + 1 < text.length && text.charAt(i + 1) === '\n') {
                return '\r\n';
            }
            return '\r';
        } else if (ch === '\n') {
            return '\n';
        }
    }
    return options && options.eol || '\n';
}
function isEOL(text, offset) {
    return '\r\n'.indexOf(text.charAt(offset)) !== -1;
}
//# sourceMappingURL=data:application/json;base64,
