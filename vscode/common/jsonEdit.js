'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.removeProperty = removeProperty;
exports.setProperty = setProperty;

var _json = require('./json');

var _jsonFormatter = require('./jsonFormatter');

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function removeProperty(text, path, formattingOptions) {
    return setProperty(text, path, void 0, formattingOptions);
}
function setProperty(text, path, value, formattingOptions, getInsertionIndex) {
    var errors = [];
    var root = (0, _json.parseTree)(text, errors);
    var parent = void 0;
    var lastSegment = void 0;
    while (path.length > 0) {
        lastSegment = path.pop();
        parent = (0, _json.findNodeAtLocation)(root, path);
        if (parent === void 0 && value !== void 0) {
            if (typeof lastSegment === 'string') {
                value = _defineProperty({}, lastSegment, value);
            } else {
                value = [value];
            }
        } else {
            break;
        }
    }
    if (!parent) {
        if (value === void 0) {
            throw new Error('Can not delete in empty document');
        }
        return withFormatting(text, { offset: root ? root.offset : 0, length: root ? root.length : 0, content: JSON.stringify(value) }, formattingOptions);
    } else if (parent.type === 'object' && typeof lastSegment === 'string') {
        var existing = (0, _json.findNodeAtLocation)(parent, [lastSegment]);
        if (existing !== void 0) {
            if (value === void 0) {
                var propertyIndex = parent.children.indexOf(existing.parent);
                var removeBegin = void 0;
                var removeEnd = existing.parent.offset + existing.parent.length;
                if (propertyIndex > 0) {
                    var previous = parent.children[propertyIndex - 1];
                    removeBegin = previous.offset + previous.length;
                } else {
                    removeBegin = parent.offset + 1;
                    if (parent.children.length > 1) {
                        var next = parent.children[1];
                        removeEnd = next.offset;
                    }
                }
                return withFormatting(text, { offset: removeBegin, length: removeEnd - removeBegin, content: '' }, formattingOptions);
            } else {
                return [{ offset: existing.offset, length: existing.length, content: JSON.stringify(value) }];
            }
        } else {
            if (value === void 0) {
                throw new Error('Property ' + lastSegment + ' does not exist.');
            }
            var newProperty = JSON.stringify(lastSegment) + ': ' + JSON.stringify(value);
            var index = getInsertionIndex ? getInsertionIndex(parent.children.map(function (p) {
                return p.children[0].value;
            })) : parent.children.length;
            var edit = void 0;
            if (index > 0) {
                var _previous = parent.children[index - 1];
                edit = { offset: _previous.offset + _previous.length, length: 0, content: ',' + newProperty };
            } else if (parent.children.length === 0) {
                edit = { offset: parent.offset + 1, length: 0, content: newProperty };
            } else {
                edit = { offset: parent.offset + 1, length: 0, content: newProperty + ',' };
            }
            return withFormatting(text, edit, formattingOptions);
        }
    } else if (parent.type === 'array' && typeof lastSegment === 'number') {
        throw new Error('Array modification not supported yet');
    } else {
        throw new Error('Can not add ' + (typeof lastSegment !== 'number' ? 'index' : 'property') + ' to parent of type ' + parent.type);
    }
}
function withFormatting(text, edit, formattingOptions) {
    var newText = (0, _jsonFormatter.applyEdit)(text, edit);
    var begin = edit.offset;
    var end = edit.offset + edit.content.length;
    var edits = (0, _jsonFormatter.format)(newText, { offset: begin, length: end - begin }, formattingOptions);
    for (var i = edits.length - 1; i >= 0; i--) {
        var _edit = edits[i];
        newText = (0, _jsonFormatter.applyEdit)(newText, _edit);
        begin = Math.min(begin, _edit.offset);
        end = Math.max(end, _edit.offset + _edit.length);
        end += _edit.content.length - _edit.length;
    }
    var editLength = text.length - (newText.length - end) - begin;
    return [{ offset: begin, length: editLength, content: newText.substring(begin, end) }];
}
//# sourceMappingURL=data:application/json;base64,
