'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _strings = require('./strings');

var _strings2 = _interopRequireDefault(_strings);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Severity;
(function (Severity) {
    Severity[Severity["Ignore"] = 0] = "Ignore";
    Severity[Severity["Info"] = 1] = "Info";
    Severity[Severity["Warning"] = 2] = "Warning";
    Severity[Severity["Error"] = 3] = "Error";
})(Severity || (Severity = {}));
var Severity;
(function (Severity) {
    var _error = 'error',
        _warning = 'warning',
        _warn = 'warn',
        _info = 'info';
    var _displayStrings = Object.create(null);
    _displayStrings[Severity.Error] = "Error";
    _displayStrings[Severity.Warning] = "Warning";
    _displayStrings[Severity.Info] = "Info";
    function fromValue(value) {
        if (!value) {
            return Severity.Ignore;
        }
        if (_strings2.default.equalsIgnoreCase(_error, value)) {
            return Severity.Error;
        }
        if (_strings2.default.equalsIgnoreCase(_warning, value) || _strings2.default.equalsIgnoreCase(_warn, value)) {
            return Severity.Warning;
        }
        if (_strings2.default.equalsIgnoreCase(_info, value)) {
            return Severity.Info;
        }
        return Severity.Ignore;
    }
    Severity.fromValue = fromValue;
    function toString(value) {
        return _displayStrings[value] || _strings2.default.empty;
    }
    Severity.toString = toString;
    function compare(a, b) {
        return b - a;
    }
    Severity.compare = compare;
})(Severity || (Severity = {}));
exports.default = Severity;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZzY29kZS9jb21tb24vc2V2ZXJpdHkudHMiLCJ2c2NvZGUvY29tbW9uL3NldmVyaXR5LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBOzs7Ozs7QUNIQTs7Ozs7O0FET0EsSUFBSyxRQUFMO0FBQUEsQ0FBQSxVQUFLLFFBQUwsRUFBYTtBQUNULGFBQUEsU0FBQSxRQUFBLElBQUEsQ0FBQSxJQUFBLFFBQUE7QUFDQSxhQUFBLFNBQUEsTUFBQSxJQUFBLENBQUEsSUFBQSxNQUFBO0FBQ0EsYUFBQSxTQUFBLFNBQUEsSUFBQSxDQUFBLElBQUEsU0FBQTtBQUNBLGFBQUEsU0FBQSxPQUFBLElBQUEsQ0FBQSxJQUFBLE9BQUE7QUFDSCxDQUxELEVBQUssYUFBQSxXQUFRLEVBQVIsQ0FBTDtBQU9BLElBQVUsUUFBVjtBQUFBLENBQUEsVUFBVSxRQUFWLEVBQW1CO0FBRWYsUUFBSSxTQUFTLE9BQWI7UUFDSSxXQUFXLFNBRGY7UUFFSSxRQUFRLE1BRlo7UUFHSSxRQUFRLE1BSFo7QUFLQSxRQUFJLGtCQUFnRCxPQUFPLE1BQVAsQ0FBYyxJQUFkLENBQXBEO0FBQ0Esb0JBQWdCLFNBQVMsS0FBekIsSUFBa0MsT0FBbEM7QUFDQSxvQkFBZ0IsU0FBUyxPQUF6QixJQUFvQyxTQUFwQztBQUNBLG9CQUFnQixTQUFTLElBQXpCLElBQWlDLE1BQWpDO0FBTUEsYUFBQSxTQUFBLENBQTBCLEtBQTFCLEVBQXVDO0FBQ25DLFlBQUksQ0FBQyxLQUFMLEVBQVk7QUFDUixtQkFBTyxTQUFTLE1BQWhCO0FBQ0g7QUFFRCxZQUFJLGtCQUFRLGdCQUFSLENBQXlCLE1BQXpCLEVBQWlDLEtBQWpDLENBQUosRUFBNkM7QUFDekMsbUJBQU8sU0FBUyxLQUFoQjtBQUNIO0FBRUQsWUFBSSxrQkFBUSxnQkFBUixDQUF5QixRQUF6QixFQUFtQyxLQUFuQyxLQUE2QyxrQkFBUSxnQkFBUixDQUF5QixLQUF6QixFQUFnQyxLQUFoQyxDQUFqRCxFQUF5RjtBQUNyRixtQkFBTyxTQUFTLE9BQWhCO0FBQ0g7QUFFRCxZQUFJLGtCQUFRLGdCQUFSLENBQXlCLEtBQXpCLEVBQWdDLEtBQWhDLENBQUosRUFBNEM7QUFDeEMsbUJBQU8sU0FBUyxJQUFoQjtBQUNIO0FBRUQsZUFBTyxTQUFTLE1BQWhCO0FBQ0g7QUFsQmUsYUFBQSxTQUFBLEdBQVMsU0FBVDtBQW9CaEIsYUFBQSxRQUFBLENBQXlCLEtBQXpCLEVBQXdDO0FBQ3BDLGVBQU8sZ0JBQWdCLEtBQWhCLEtBQTBCLGtCQUFRLEtBQXpDO0FBQ0g7QUFGZSxhQUFBLFFBQUEsR0FBUSxRQUFSO0FBSWhCLGFBQUEsT0FBQSxDQUF3QixDQUF4QixFQUFxQyxDQUFyQyxFQUFnRDtBQUM1QyxlQUFPLElBQUksQ0FBWDtBQUNIO0FBRmUsYUFBQSxPQUFBLEdBQU8sT0FBUDtBQUduQixDQTNDRCxFQUFVLGFBQUEsV0FBUSxFQUFSLENBQVY7a0JBNkNlLFEiLCJmaWxlIjoidnNjb2RlL2NvbW1vbi9zZXZlcml0eS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5pbXBvcnQgc3RyaW5ncyBmcm9tICcuL3N0cmluZ3MnO1xyXG5cclxuZW51bSBTZXZlcml0eSB7XHJcbiAgICBJZ25vcmUgPSAwLFxyXG4gICAgSW5mbyA9IDEsXHJcbiAgICBXYXJuaW5nID0gMixcclxuICAgIEVycm9yID0gM1xyXG59XHJcblxyXG5uYW1lc3BhY2UgU2V2ZXJpdHkge1xyXG5cclxuICAgIHZhciBfZXJyb3IgPSAnZXJyb3InLFxyXG4gICAgICAgIF93YXJuaW5nID0gJ3dhcm5pbmcnLFxyXG4gICAgICAgIF93YXJuID0gJ3dhcm4nLFxyXG4gICAgICAgIF9pbmZvID0gJ2luZm8nO1xyXG5cclxuICAgIHZhciBfZGlzcGxheVN0cmluZ3M6IHsgW3ZhbHVlOiBudW1iZXJdOiBzdHJpbmc7IH0gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgX2Rpc3BsYXlTdHJpbmdzW1NldmVyaXR5LkVycm9yXSA9IFwiRXJyb3JcIjtcclxuICAgIF9kaXNwbGF5U3RyaW5nc1tTZXZlcml0eS5XYXJuaW5nXSA9IFwiV2FybmluZ1wiO1xyXG4gICAgX2Rpc3BsYXlTdHJpbmdzW1NldmVyaXR5LkluZm9dID0gXCJJbmZvXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJzZXMgJ2Vycm9yJywgJ3dhcm5pbmcnLCAnd2FybicsICdpbmZvJyBpbiBjYWxsIGNhc2luZ3NcclxuICAgICAqIGFuZCBmYWxscyBiYWNrIHRvIGlnbm9yZS5cclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGZyb21WYWx1ZSh2YWx1ZTogc3RyaW5nKTogU2V2ZXJpdHkge1xyXG4gICAgICAgIGlmICghdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFNldmVyaXR5Lklnbm9yZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzdHJpbmdzLmVxdWFsc0lnbm9yZUNhc2UoX2Vycm9yLCB2YWx1ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFNldmVyaXR5LkVycm9yO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHN0cmluZ3MuZXF1YWxzSWdub3JlQ2FzZShfd2FybmluZywgdmFsdWUpIHx8IHN0cmluZ3MuZXF1YWxzSWdub3JlQ2FzZShfd2FybiwgdmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBTZXZlcml0eS5XYXJuaW5nO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHN0cmluZ3MuZXF1YWxzSWdub3JlQ2FzZShfaW5mbywgdmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBTZXZlcml0eS5JbmZvO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIFNldmVyaXR5Lklnbm9yZTtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gdG9TdHJpbmcodmFsdWU6IFNldmVyaXR5KTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gX2Rpc3BsYXlTdHJpbmdzW3ZhbHVlXSB8fCBzdHJpbmdzLmVtcHR5O1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBjb21wYXJlKGE6IFNldmVyaXR5LCBiOiBTZXZlcml0eSk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIGIgLSBhO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTZXZlcml0eTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHN0cmluZ3MgZnJvbSAnLi9zdHJpbmdzJztcbnZhciBTZXZlcml0eTtcbihmdW5jdGlvbiAoU2V2ZXJpdHkpIHtcbiAgICBTZXZlcml0eVtTZXZlcml0eVtcIklnbm9yZVwiXSA9IDBdID0gXCJJZ25vcmVcIjtcbiAgICBTZXZlcml0eVtTZXZlcml0eVtcIkluZm9cIl0gPSAxXSA9IFwiSW5mb1wiO1xuICAgIFNldmVyaXR5W1NldmVyaXR5W1wiV2FybmluZ1wiXSA9IDJdID0gXCJXYXJuaW5nXCI7XG4gICAgU2V2ZXJpdHlbU2V2ZXJpdHlbXCJFcnJvclwiXSA9IDNdID0gXCJFcnJvclwiO1xufSkoU2V2ZXJpdHkgfHwgKFNldmVyaXR5ID0ge30pKTtcbnZhciBTZXZlcml0eTtcbihmdW5jdGlvbiAoU2V2ZXJpdHkpIHtcbiAgICB2YXIgX2Vycm9yID0gJ2Vycm9yJywgX3dhcm5pbmcgPSAnd2FybmluZycsIF93YXJuID0gJ3dhcm4nLCBfaW5mbyA9ICdpbmZvJztcbiAgICB2YXIgX2Rpc3BsYXlTdHJpbmdzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBfZGlzcGxheVN0cmluZ3NbU2V2ZXJpdHkuRXJyb3JdID0gXCJFcnJvclwiO1xuICAgIF9kaXNwbGF5U3RyaW5nc1tTZXZlcml0eS5XYXJuaW5nXSA9IFwiV2FybmluZ1wiO1xuICAgIF9kaXNwbGF5U3RyaW5nc1tTZXZlcml0eS5JbmZvXSA9IFwiSW5mb1wiO1xuICAgIGZ1bmN0aW9uIGZyb21WYWx1ZSh2YWx1ZSkge1xuICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gU2V2ZXJpdHkuSWdub3JlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdHJpbmdzLmVxdWFsc0lnbm9yZUNhc2UoX2Vycm9yLCB2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBTZXZlcml0eS5FcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RyaW5ncy5lcXVhbHNJZ25vcmVDYXNlKF93YXJuaW5nLCB2YWx1ZSkgfHwgc3RyaW5ncy5lcXVhbHNJZ25vcmVDYXNlKF93YXJuLCB2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBTZXZlcml0eS5XYXJuaW5nO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdHJpbmdzLmVxdWFsc0lnbm9yZUNhc2UoX2luZm8sIHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIFNldmVyaXR5LkluZm87XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFNldmVyaXR5Lklnbm9yZTtcbiAgICB9XG4gICAgU2V2ZXJpdHkuZnJvbVZhbHVlID0gZnJvbVZhbHVlO1xuICAgIGZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBfZGlzcGxheVN0cmluZ3NbdmFsdWVdIHx8IHN0cmluZ3MuZW1wdHk7XG4gICAgfVxuICAgIFNldmVyaXR5LnRvU3RyaW5nID0gdG9TdHJpbmc7XG4gICAgZnVuY3Rpb24gY29tcGFyZShhLCBiKSB7XG4gICAgICAgIHJldHVybiBiIC0gYTtcbiAgICB9XG4gICAgU2V2ZXJpdHkuY29tcGFyZSA9IGNvbXBhcmU7XG59KShTZXZlcml0eSB8fCAoU2V2ZXJpdHkgPSB7fSkpO1xuZXhwb3J0IGRlZmF1bHQgU2V2ZXJpdHk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
