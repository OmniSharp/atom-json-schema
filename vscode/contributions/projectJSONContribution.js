'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ProjectJSONContribution = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _strings = require('../common/strings');

var _strings2 = _interopRequireDefault(_strings);

var _requestLight = require('request-light');

var _requestLight2 = _interopRequireDefault(_requestLight);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LIMIT = 40;

var ProjectJSONContribution = exports.ProjectJSONContribution = function () {
    function ProjectJSONContribution() {
        _classCallCheck(this, ProjectJSONContribution);
    }

    _createClass(ProjectJSONContribution, [{
        key: 'isProjectJSONFile',
        value: function isProjectJSONFile(resource) {
            var path = resource.path;
            return _strings2.default.endsWith(path, '/project.json');
        }
    }, {
        key: 'collectDefaultSuggestions',
        value: function collectDefaultSuggestions(resource, result) {
            if (this.isProjectJSONFile(resource)) {
                var defaultValue = {
                    'version': '{{1.0.0-*}}',
                    'dependencies': {},
                    'frameworks': {
                        'dnx451': {},
                        'dnxcore50': {}
                    }
                };
                result.add({ type: 'snippet', displayText: 'Default project.json', snippet: JSON.stringify(defaultValue, null, '\t'), description: '' });
            }
            return null;
        }
    }, {
        key: 'collectPropertySuggestions',
        value: function collectPropertySuggestions(resource, location, currentWord, addValue, isLast, result) {
            if (this.isProjectJSONFile(resource) && (location.matches(['dependencies']) || location.matches(['frameworks', '*', 'dependencies']) || location.matches(['frameworks', '*', 'frameworkAssemblies']))) {
                var queryUrl;
                if (currentWord.length > 0) {
                    queryUrl = 'https://www.nuget.org/api/v2/Packages?' + '$filter=Id%20ge%20\'' + encodeURIComponent(currentWord) + '\'%20and%20Id%20lt%20\'' + encodeURIComponent(currentWord + 'z') + '\'%20and%20IsAbsoluteLatestVersion%20eq%20true' + '&$select=Id,Version,Description&$format=json&$top=' + LIMIT;
                } else {
                    queryUrl = 'https://www.nuget.org/api/v2/Packages?' + '$filter=IsAbsoluteLatestVersion%20eq%20true' + '&$orderby=DownloadCount%20desc&$top=' + LIMIT + '&$select=Id,Version,DownloadCount,Description&$format=json';
                }
                return _requestLight2.default.xhr({
                    url: queryUrl
                }).then(function (success) {
                    if (success.status === 200) {
                        try {
                            var obj = JSON.parse(success.responseText);
                            if (Array.isArray(obj.d)) {
                                var results = obj.d;
                                for (var i = 0; i < results.length; i++) {
                                    var curr = results[i];
                                    var name = curr.Id;
                                    var version = curr.Version;
                                    if (name) {
                                        var documentation = curr.Description;
                                        var typeLabel = curr.Version;
                                        var codeSnippet = JSON.stringify(name);
                                        if (addValue) {
                                            codeSnippet += ': "{{' + version + '}}"';
                                            if (!isLast) {
                                                codeSnippet += ',';
                                            }
                                        }
                                        result.add({ type: 'property', displayText: name, snippet: codeSnippet, className: typeLabel, description: documentation });
                                    }
                                }
                                if (results.length === LIMIT) {
                                    result.setAsIncomplete();
                                }
                            }
                        } catch (e) {}
                    } else {
                        result.error('Request to the nuget repository failed: ' + success.responseText);
                        return 0;
                    }
                }, function (error) {
                    result.error('Request to the nuget repository failed: ' + error.responseText);
                    return 0;
                });
            }
            return null;
        }
    }, {
        key: 'collectValueSuggestions',
        value: function collectValueSuggestions(resource, location, currentKey, result) {
            if (this.isProjectJSONFile(resource) && (location.matches(['dependencies']) || location.matches(['frameworks', '*', 'dependencies']) || location.matches(['frameworks', '*', 'frameworkAssemblies']))) {
                var queryUrl = 'https://www.myget.org/F/aspnetrelease/api/v2/Packages?' + '$filter=Id%20eq%20\'' + encodeURIComponent(currentKey) + '\'&$select=Version,IsAbsoluteLatestVersion&$format=json&$top=' + LIMIT;
                return _requestLight2.default.xhr({
                    url: queryUrl
                }).then(function (success) {
                    try {
                        var obj = JSON.parse(success.responseText);
                        if (Array.isArray(obj.d)) {
                            var results = obj.d;
                            for (var i = 0; i < results.length; i++) {
                                var curr = results[i];
                                var version = curr.Version;
                                if (version) {
                                    var name = JSON.stringify(version);
                                    var isLatest = curr.IsAbsoluteLatestVersion === 'true';
                                    var label = name;
                                    var documentationLabel = '';
                                    if (isLatest) {
                                        documentationLabel = 'The currently latest version of the package';
                                    }
                                    result.add({ type: 'class', displayText: label, snippet: name, description: documentationLabel });
                                }
                            }
                            if (results.length === LIMIT) {
                                result.setAsIncomplete();
                            }
                        }
                    } catch (e) {}
                    return 0;
                }, function (error) {
                    return 0;
                });
            }
            return null;
        }
    }, {
        key: 'getInfoContribution',
        value: function getInfoContribution(resource, location) {
            if (this.isProjectJSONFile(resource) && (location.matches(['dependencies', '*']) || location.matches(['frameworks', '*', 'dependencies', '*']) || location.matches(['frameworks', '*', 'frameworkAssemblies', '*']))) {
                var pack = location.getSegments()[location.getSegments().length - 1];
                var htmlContent = [];
                htmlContent.push({ className: 'type', text: pack });
                var queryUrl = 'https://www.myget.org/F/aspnetrelease/api/v2/Packages?' + '$filter=Id%20eq%20\'' + encodeURIComponent(pack) + '\'%20and%20IsAbsoluteLatestVersion%20eq%20true' + '&$select=Version,Description&$format=json&$top=5';
                return _requestLight2.default.xhr({
                    url: queryUrl
                }).then(function (success) {
                    var content = success.responseText;
                    if (content) {
                        try {
                            var obj = JSON.parse(content);
                            if (obj.d && obj.d[0]) {
                                var res = obj.d[0];
                                if (res.Description) {
                                    htmlContent.push({ className: 'documentation', text: res.Description });
                                }
                                if (res.Version) {
                                    htmlContent.push({ className: 'documentation', text: 'Latest version: ' + res.Version });
                                }
                            }
                        } catch (e) {}
                    }
                    return htmlContent;
                }, function (error) {
                    return htmlContent;
                });
            }
            return null;
        }
    }]);

    return ProjectJSONContribution;
}();
//# sourceMappingURL=data:application/json;base64,
