'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.GlobPatternContribution = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _strings = require('../common/strings');

var _strings2 = _interopRequireDefault(_strings);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var globProperties = [{ type: 'value', displayText: 'Files by Extension', snippet: '"**/*.{{extension}}": true', description: 'Match all files of a specific file extension.' }, { type: 'value', displayText: 'Files with Multiple Extensions', snippet: '"**/*.{ext1,ext2,ext3}": true', description: 'Match all files with any of the file extensions.' }, { type: 'value', displayText: 'Files with Siblings by Name', snippet: '"**/*.{{source-extension}}": { "when": "$(basename).{{target-extension}}" }', description: 'Match files that have siblings with the same name but a different extension.' }, { type: 'value', displayText: 'Folder by Name (Top Level)', snippet: '"{{name}}": true', description: 'Match a top level folder with a specific name.' }, { type: 'value', displayText: 'Folders with Multiple Names (Top Level)', snippet: '"{folder1,folder2,folder3}": true', description: 'Match multiple top level folders.' }, { type: 'value', displayText: 'Folder by Name (Any Location)', snippet: '"**/{{name}}": true', description: 'Match a folder with a specific name in any location.' }];
var globValues = [{ type: 'value', displayText: 'True', snippet: 'true', description: 'Enable the pattern.' }, { type: 'value', displayText: 'False', snippet: 'false', description: 'Disable the pattern.' }, { type: 'value', displayText: 'Files with Siblings by Name', snippet: '{ "when": "$(basename).{{extension}}" }', description: 'Match files that have siblings with the same name but a different extension.' }];

var GlobPatternContribution = exports.GlobPatternContribution = function () {
    function GlobPatternContribution() {
        _classCallCheck(this, GlobPatternContribution);
    }

    _createClass(GlobPatternContribution, [{
        key: 'isSettingsFile',
        value: function isSettingsFile(resource) {
            var path = resource.path;
            return _strings2.default.endsWith(path, '/settings.json');
        }
    }, {
        key: 'collectDefaultSuggestions',
        value: function collectDefaultSuggestions(resource, result) {
            return null;
        }
    }, {
        key: 'collectPropertySuggestions',
        value: function collectPropertySuggestions(resource, location, currentWord, addValue, isLast, result) {
            if (this.isSettingsFile(resource) && (location.matches(['files.exclude']) || location.matches(['search.exclude']))) {
                globProperties.forEach(function (e) {
                    return result.add(e);
                });
            }
            return null;
        }
    }, {
        key: 'collectValueSuggestions',
        value: function collectValueSuggestions(resource, location, currentKey, result) {
            if (this.isSettingsFile(resource) && (location.matches(['files.exclude']) || location.matches(['search.exclude']))) {
                globValues.forEach(function (e) {
                    return result.add(e);
                });
            }
            return null;
        }
    }, {
        key: 'getInfoContribution',
        value: function getInfoContribution(resource, location) {
            return null;
        }
    }]);

    return GlobPatternContribution;
}();
//# sourceMappingURL=data:application/json;base64,
