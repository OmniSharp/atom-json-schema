'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PackageJSONContribution = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _strings = require('../common/strings');

var _strings2 = _interopRequireDefault(_strings);

var _requestLight = require('request-light');

var _requestLight2 = _interopRequireDefault(_requestLight);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LIMIT = 40;

var PackageJSONContribution = exports.PackageJSONContribution = function () {
    function PackageJSONContribution() {
        _classCallCheck(this, PackageJSONContribution);

        this.mostDependedOn = ['lodash', 'async', 'underscore', 'request', 'commander', 'express', 'debug', 'chalk', 'colors', 'q', 'coffee-script', 'mkdirp', 'optimist', 'through2', 'yeoman-generator', 'moment', 'bluebird', 'glob', 'gulp-util', 'minimist', 'cheerio', 'jade', 'redis', 'node-uuid', 'socket', 'io', 'uglify-js', 'winston', 'through', 'fs-extra', 'handlebars', 'body-parser', 'rimraf', 'mime', 'semver', 'mongodb', 'jquery', 'grunt', 'connect', 'yosay', 'underscore', 'string', 'xml2js', 'ejs', 'mongoose', 'marked', 'extend', 'mocha', 'superagent', 'js-yaml', 'xtend', 'shelljs', 'gulp', 'yargs', 'browserify', 'minimatch', 'react', 'less', 'prompt', 'inquirer', 'ws', 'event-stream', 'inherits', 'mysql', 'esprima', 'jsdom', 'stylus', 'when', 'readable-stream', 'aws-sdk', 'concat-stream', 'chai', 'promise', 'wrench'];
    }

    _createClass(PackageJSONContribution, [{
        key: 'isPackageJSONFile',
        value: function isPackageJSONFile(resource) {
            var path = resource.path;
            return _strings2.default.endsWith(path, '/package.json');
        }
    }, {
        key: 'collectDefaultSuggestions',
        value: function collectDefaultSuggestions(resource, result) {
            if (this.isPackageJSONFile(resource)) {
                var defaultValue = {
                    'name': '{{name}}',
                    'description': '{{description}}',
                    'author': '{{author}}',
                    'version': '{{1.0.0}}',
                    'main': '{{pathToMain}}',
                    'dependencies': {}
                };
                result.add({ type: 'module', displayText: 'Default package.json', snippet: JSON.stringify(defaultValue, null, '\t'), description: '' });
            }
            return null;
        }
    }, {
        key: 'collectPropertySuggestions',
        value: function collectPropertySuggestions(resource, location, currentWord, addValue, isLast, result) {
            if (this.isPackageJSONFile(resource) && (location.matches(['dependencies']) || location.matches(['devDependencies']) || location.matches(['optionalDependencies']) || location.matches(['peerDependencies']))) {
                var queryUrl;
                if (currentWord.length > 0) {
                    queryUrl = 'https://skimdb.npmjs.com/registry/_design/app/_view/browseAll?group_level=1&limit=' + LIMIT + '&start_key=%5B%22' + encodeURIComponent(currentWord) + '%22%5D&end_key=%5B%22' + encodeURIComponent(currentWord + 'z') + '%22,%7B%7D%5D';
                    return _requestLight2.default.xhr({
                        url: queryUrl
                    }).then(function (success) {
                        if (success.status === 200) {
                            try {
                                var obj = JSON.parse(success.responseText);
                                if (obj && Array.isArray(obj.rows)) {
                                    var results = obj.rows;
                                    for (var i = 0; i < results.length; i++) {
                                        var keys = results[i].key;
                                        if (Array.isArray(keys) && keys.length > 0) {
                                            var name = keys[0];
                                            var codeSnippet = JSON.stringify(name);
                                            if (addValue) {
                                                codeSnippet += ': "{{*}}"';
                                                if (!isLast) {
                                                    codeSnippet += ',';
                                                }
                                            }
                                            result.add({ type: 'property', displayText: name, snippet: codeSnippet, description: '' });
                                        }
                                    }
                                    if (results.length === LIMIT) {
                                        result.setAsIncomplete();
                                    }
                                }
                            } catch (e) {}
                        } else {
                            result.error('Request to the NPM repository failed: ' + success.responseText);
                            return 0;
                        }
                    }, function (error) {
                        result.error('Request to the NPM repository failed: ' + error.responseText);
                        return 0;
                    });
                } else {
                    this.mostDependedOn.forEach(function (name) {
                        var codeSnippet = JSON.stringify(name);
                        if (addValue) {
                            codeSnippet += ': "{{*}}"';
                            if (!isLast) {
                                codeSnippet += ',';
                            }
                        }
                        result.add({ type: 'property', displayText: name, snippet: codeSnippet, description: '' });
                    });
                    result.setAsIncomplete();
                }
            }
            return null;
        }
    }, {
        key: 'collectValueSuggestions',
        value: function collectValueSuggestions(resource, location, currentKey, result) {
            if (this.isPackageJSONFile(resource) && (location.matches(['dependencies']) || location.matches(['devDependencies']) || location.matches(['optionalDependencies']) || location.matches(['peerDependencies']))) {
                var queryUrl = 'http://registry.npmjs.org/' + encodeURIComponent(currentKey) + '/latest';
                return _requestLight2.default.xhr({
                    url: queryUrl
                }).then(function (success) {
                    try {
                        var obj = JSON.parse(success.responseText);
                        if (obj && obj.version) {
                            var version = obj.version;
                            var name = JSON.stringify(version);
                            result.add({ type: 'class', displayText: name, snippet: name, description: 'The currently latest version of the package' });
                            name = JSON.stringify('^' + version);
                            result.add({ type: 'class', displayText: name, snippet: name, description: 'Matches the most recent major version (1.x.x)' });
                            name = JSON.stringify('~' + version);
                            result.add({ type: 'class', displayText: name, snippet: name, description: 'Matches the most recent minor version (1.2.x)' });
                        }
                    } catch (e) {}
                    return 0;
                }, function (error) {
                    return 0;
                });
            }
            return null;
        }
    }, {
        key: 'getInfoContribution',
        value: function getInfoContribution(resource, location) {
            if (this.isPackageJSONFile(resource) && (location.matches(['dependencies', '*']) || location.matches(['devDependencies', '*']) || location.matches(['optionalDependencies', '*']) || location.matches(['peerDependencies', '*']))) {
                var pack = location.getSegments()[location.getSegments().length - 1];
                var htmlContent = [];
                htmlContent.push({ className: 'type', text: pack });
                var queryUrl = 'http://registry.npmjs.org/' + encodeURIComponent(pack) + '/latest';
                return _requestLight2.default.xhr({
                    url: queryUrl
                }).then(function (success) {
                    try {
                        var obj = JSON.parse(success.responseText);
                        if (obj) {
                            if (obj.description) {
                                htmlContent.push({ className: 'documentation', text: obj.description });
                            }
                            if (obj.version) {
                                htmlContent.push({ className: 'documentation', text: 'Latest version: ' + obj.version });
                            }
                        }
                    } catch (e) {}
                    return htmlContent;
                }, function (error) {
                    return htmlContent;
                });
            }
            return null;
        }
    }]);

    return PackageJSONContribution;
}();
//# sourceMappingURL=data:application/json;base64,
