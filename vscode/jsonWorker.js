'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Location = exports.JSONWorker = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _severity = require("./common/severity");

var _severity2 = _interopRequireDefault(_severity);

var _jsonParser = require("./parser/jsonParser");

var _jsonParser2 = _interopRequireDefault(_jsonParser);

var _jsonFormatter = require("./common/jsonFormatter");

var _jsonFormatter2 = _interopRequireDefault(_jsonFormatter);

var _jsonSchemaService = require("./jsonSchemaService");

var _jsonSchemaService2 = _interopRequireDefault(_jsonSchemaService);

var _jsonIntellisense = require("./jsonIntellisense");

var _jsonIntellisense2 = _interopRequireDefault(_jsonIntellisense);

var _strings = require("./common/strings");

var _strings2 = _interopRequireDefault(_strings);

var _projectJSONContribution = require("./contributions/projectJSONContribution");

var _projectJSONContribution2 = _interopRequireDefault(_projectJSONContribution);

var _packageJSONContribution = require("./contributions/packageJSONContribution");

var _packageJSONContribution2 = _interopRequireDefault(_packageJSONContribution);

var _bowerJSONContribution = require("./contributions/bowerJSONContribution");

var _bowerJSONContribution2 = _interopRequireDefault(_bowerJSONContribution);

var _globPatternContribution = require("./contributions/globPatternContribution");

var _globPatternContribution2 = _interopRequireDefault(_globPatternContribution);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = undefined && undefined.__param || function (paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
};

var JSONWorker = exports.JSONWorker = function () {
    function JSONWorker(modeId, resourceService, markerService, contextService, instantiationService) {
        var _this = this;

        _classCallCheck(this, JSONWorker);

        this._modeId = modeId;
        this.resourceService = resourceService;
        this.markerService = markerService;
        this._validationHelper = new ValidationHelper(this.resourceService, this._modeId, function (toValidate) {
            return _this.doValidate(toValidate);
        });
        this.contextService = contextService;
        this.schemaService = instantiationService.createInstance(_jsonSchemaService2.default.JSONSchemaService);
        this.contributions = [instantiationService.createInstance(_projectJSONContribution2.default.ProjectJSONContribution), instantiationService.createInstance(_packageJSONContribution2.default.PackageJSONContribution), instantiationService.createInstance(_bowerJSONContribution2.default.BowerJSONContribution), instantiationService.createInstance(_globPatternContribution2.default.GlobPatternContribution)];
        this.jsonIntellisense = new _jsonIntellisense2.default.JSONIntellisenese(this.schemaService, this.contributions);
    }

    _createClass(JSONWorker, [{
        key: "navigateValueSet",
        value: function navigateValueSet(resource, range, up) {
            var _this2 = this;

            var modelMirror = this.resourceService.get(resource);
            var offset = modelMirror.getOffsetFromPosition({ lineNumber: range.startLineNumber, column: range.startColumn });
            var parser = new _jsonParser2.default.JSONParser();
            var config = new _jsonParser2.default.JSONDocumentConfig();
            config.ignoreDanglingComma = true;
            var doc = parser.parse(modelMirror.getValue(), config);
            var node = doc.getNodeFromOffsetEndInclusive(offset);
            if (node && (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null')) {
                return this.schemaService.getSchemaForResource(resource.toString(), doc).then(function (schema) {
                    if (schema) {
                        var proposals = [];
                        var proposed = {};
                        var collector = {
                            add: function add(suggestion) {
                                if (!proposed[suggestion.text]) {
                                    proposed[suggestion.text] = true;
                                    proposals.push(suggestion);
                                }
                            },
                            setAsIncomplete: function setAsIncomplete() {},
                            error: function error(message) {
                                throw new Error(message);
                            }
                        };
                        _this2.jsonIntellisense.getValueSuggestions(resource, schema, doc, node.parent, node.start, collector);
                        var range = modelMirror.getRangeFromOffsetAndLength(node.start, node.end - node.start);
                        var text = modelMirror.getValueInRange(range);
                        for (var i = 0, len = proposals.length; i < len; i++) {
                            if (_strings2.default.equalsIgnoreCase(proposals[i].text, text)) {
                                var nextIdx = i;
                                if (up) {
                                    nextIdx = (i + 1) % len;
                                } else {
                                    nextIdx = i - 1;
                                    if (nextIdx < 0) {
                                        nextIdx = len - 1;
                                    }
                                }
                                return {
                                    value: proposals[nextIdx].text,
                                    range: range
                                };
                            }
                        }
                        return null;
                    }
                });
            }
            return null;
        }
    }, {
        key: "_doConfigure",
        value: function _doConfigure(options) {
            var _this3 = this;

            if (options && options.schemas) {
                this.schemaService.clearExternalSchemas();
                options.schemas.forEach(function (schema) {
                    if (schema.url && (schema.fileMatch || schema.schema)) {
                        var url = schema.url;
                        if (!_strings2.default.startsWith(url, 'http://') && !_strings2.default.startsWith(url, 'https://') && !_strings2.default.startsWith(url, 'file://')) {
                            var resourceURL = _this3.contextService.toResource(url);
                            if (resourceURL) {
                                url = resourceURL.toString();
                            }
                        }
                        if (url) {
                            _this3.schemaService.registerExternalSchema(url, schema.fileMatch, schema.schema);
                        }
                    } else if (schema.filePattern && schema.schemaPath) {
                        var url = _this3.contextService.toResource(schema.schemaPath).toString();
                        var patterns = schema.filePattern ? [schema.filePattern] : [];
                        _this3.schemaService.registerExternalSchema(url, patterns);
                    }
                });
            }
            this._validationHelper.triggerDueToConfigurationChange();
            return Promise.resolve(void 0);
        }
    }, {
        key: "setSchemaContributions",
        value: function setSchemaContributions(contributions) {
            this.schemaService.setSchemaContributions(contributions);
            return Promise.resolve(true);
        }
    }, {
        key: "enableValidator",
        value: function enableValidator() {
            this._validationHelper.enable();
            return Promise.resolve(null);
        }
    }, {
        key: "doValidate",
        value: function doValidate(resources) {
            for (var i = 0; i < resources.length; i++) {
                this.doValidate1(resources[i]);
            }
        }
    }, {
        key: "doValidate1",
        value: function doValidate1(resource) {
            var _this4 = this;

            var modelMirror = this.resourceService.get(resource);
            var parser = new _jsonParser2.default.JSONParser();
            var content = modelMirror.getValue();
            if (content.length === 0) {
                return;
            }
            var result = parser.parse(content);
            this.schemaService.getSchemaForResource(resource.toString(), result).then(function (schema) {
                if (schema) {
                    if (schema.errors.length && result.root) {
                        var property = result.root.type === 'object' ? result.root.getFirstProperty('$schema') : null;
                        if (property) {
                            var node = property.value || property;
                            result.warnings.push({ location: { start: node.start, end: node.end }, message: schema.errors[0] });
                        } else {
                            result.warnings.push({ location: { start: result.root.start, end: result.root.start + 1 }, message: schema.errors[0] });
                        }
                    } else {
                        result.validate(schema.schema);
                    }
                }
                var added = {};
                var markerData = [];
                result.errors.concat(result.warnings).forEach(function (error, idx) {
                    var signature = error.location.start + ' ' + error.location.end + ' ' + error.message;
                    if (!added[signature]) {
                        added[signature] = true;
                        var startPosition = modelMirror.getPositionFromOffset(error.location.start);
                        var endPosition = modelMirror.getPositionFromOffset(error.location.end);
                        markerData.push({
                            message: error.message,
                            severity: idx >= result.errors.length ? _severity2.default.Warning : _severity2.default.Error,
                            startLineNumber: startPosition.lineNumber,
                            startColumn: startPosition.column,
                            endLineNumber: endPosition.lineNumber,
                            endColumn: endPosition.column
                        });
                    }
                });
                _this4.markerService.changeOne(_this4._modeId, resource, markerData);
            });
        }
    }, {
        key: "provideCompletionItems",
        value: function provideCompletionItems(resource, position) {
            return this.doSuggest(resource, position).then(function (value) {
                return filterSuggestions(value);
            });
        }
    }, {
        key: "doSuggest",
        value: function doSuggest(resource, position) {
            var modelMirror = this.resourceService.get(resource);
            return this.jsonIntellisense.doSuggest(resource, modelMirror, position);
        }
    }, {
        key: "provideHover",
        value: function provideHover(resource, position) {
            var _this5 = this;

            var modelMirror = this.resourceService.get(resource);
            var parser = new _jsonParser2.default.JSONParser();
            var doc = parser.parse(modelMirror.getValue());
            var offset = modelMirror.getOffsetFromPosition(position);
            var node = doc.getNodeFromOffset(offset);
            var originalNode = node;
            if (node && node.type === 'string') {
                var stringNode = node;
                if (stringNode.isKey) {
                    var propertyNode = node.parent;
                    node = propertyNode.value;
                }
            }
            if (!node) {
                return Promise.resolve(null);
            }
            return this.schemaService.getSchemaForResource(resource.toString(), doc).then(function (schema) {
                if (schema) {
                    var matchingSchemas = [];
                    doc.validate(schema.schema, matchingSchemas, node.start);
                    var description = null;
                    var contributonId = null;
                    matchingSchemas.every(function (s) {
                        if (s.node === node && !s.inverted && s.schema) {
                            description = description || s.schema.description;
                            contributonId = contributonId || s.schema.id;
                        }
                        return true;
                    });
                    var location = node.getNodeLocation();
                    for (var i = _this5.contributions.length - 1; i >= 0; i--) {
                        var contribution = _this5.contributions[i];
                        var promise = contribution.getInfoContribution(resource, location);
                        if (promise) {
                            return promise.then(function (htmlContent) {
                                return _this5.createInfoResult(htmlContent, originalNode, modelMirror);
                            });
                        }
                    }
                    if (description) {
                        var htmlContent = [{ className: 'documentation', text: description }];
                        return _this5.createInfoResult(htmlContent, originalNode, modelMirror);
                    }
                }
                return null;
            });
        }
    }, {
        key: "createInfoResult",
        value: function createInfoResult(htmlContent, node, modelMirror) {
            var range = modelMirror.getRangeFromOffsetAndLength(node.start, node.end - node.start);
            var result = {
                htmlContent: htmlContent,
                range: range
            };
            return result;
        }
    }, {
        key: "provideDocumentSymbols",
        value: function provideDocumentSymbols(resource) {
            var modelMirror = this.resourceService.get(resource);
            var parser = new _jsonParser2.default.JSONParser();
            var doc = parser.parse(modelMirror.getValue());
            var root = doc.root;
            if (!root) {
                return Promise.resolve(null);
            }
            var resourceString = resource.toString();
            if (resourceString === 'vscode://defaultsettings/keybindings.json' || _strings2.default.endsWith(resourceString.toLowerCase(), '/user/keybindings.json')) {
                if (root.type === 'array') {
                    var result = [];
                    root.items.forEach(function (item) {
                        if (item.type === 'object') {
                            var property = item.getFirstProperty('key');
                            if (property && property.value) {
                                var range = modelMirror.getRangeFromOffsetAndLength(item.start, item.end - item.start);
                                result.push({
                                    name: property.value.getValue(),
                                    kind: "string",
                                    location: {
                                        uri: resource,
                                        range: range
                                    }
                                });
                            }
                        }
                    });
                    return Promise.resolve(result);
                }
            }
            function collectOutlineEntries(result, node, containerName) {
                if (node.type === 'array') {
                    node.items.forEach(function (node) {
                        collectOutlineEntries(result, node, containerName);
                    });
                } else if (node.type === 'object') {
                    var objectNode = node;
                    objectNode.properties.forEach(function (property) {
                        var range = modelMirror.getRangeFromOffsetAndLength(property.start, property.end - property.start);
                        var valueNode = property.value;
                        if (valueNode) {
                            var childContainerName = containerName ? containerName + '.' + property.key.name : property.key.name;
                            result.push({
                                name: property.key.getValue(),
                                kind: getSymbolKind(valueNode.type),
                                location: {
                                    uri: resource,
                                    range: range
                                },
                                containerName: containerName
                            });
                            collectOutlineEntries(result, valueNode, childContainerName);
                        }
                    });
                }
                return result;
            }
            var result = collectOutlineEntries([], root, void 0);
            return Promise.resolve(result);
        }
    }, {
        key: "format",
        value: function format(resource, range, options) {
            var model = this.resourceService.get(resource);
            var formatRange = range ? model.getOffsetAndLengthFromRange(range) : void 0;
            var edits = _jsonFormatter2.default.format(model.getValue(), formatRange, { insertSpaces: options.insertSpaces, tabSize: options.tabSize, eol: model.getEOL() });
            var operations = edits.map(function (e) {
                return { range: model.getRangeFromOffsetAndLength(e.offset, e.length), text: e.content };
            });
            return Promise.resolve(operations);
        }
    }]);

    return JSONWorker;
}();

exports.JSONWorker = JSONWorker = __decorate([__param(1, IResourceService), __param(2, IMarkerService), __param(3, IWorkspaceContextService), __param(4, IInstantiationService)], JSONWorker);
function getSymbolKind(nodeType) {
    switch (nodeType) {
        case 'object':
        case 'string':
        case 'number':
        case 'array':
        case 'boolean':
            return nodeType;
        default:
            return "variable";
    }
}

var Location = exports.Location = function Location() {
    _classCallCheck(this, Location);
};
//# sourceMappingURL=data:application/json;base64,
