// Type definitions for scoped-property-store (v0.17.0)
// Project: https://github.com/atom/scoped-property-store
// Definitions by: david-driscoll <https://github.com/david-driscoll/>
// Definitions: https://github.com/borisyankov/DefinitelyTyped

// Generated by: https://github.com/david-driscoll/atom-typescript-generator
// Generation tool by david-driscoll <https://github.com/david-driscoll/>
/// <reference path="../event-kit/event-kit.d.ts" />
declare module ScopedPropertyStore {
    /**
     * PropertySet
     * This class was not documented by atomdoc, assume it is private. Use with caution.
     */
    class PropertySet {
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        source: any /* default */;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        selector: Selector;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        properties: any /* default */;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        constructor(source? : any, selector? : Selector, properties? : any);
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        matches(scope? : any) : any;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        compare(other? : any) : any;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        merge(other? : any) : any;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        has(keyPath? : string) : any;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        get(keyPath? : string) : any;
    
    }

    /**
     * 
     */
    class ScopedPropertyStore {
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        constructor();
    
        /**
         * Add scoped properties to be queried with {::get}
         * @param source? - A string describing these properties to allow them to be removed later.
         * @param propertiesBySelector? - An {Object} containing CSS-selectors mapping to {Objects} containing properties. For example: `{'.foo .bar': {x: 1, y: 2}`
         */
        addProperties(source? : any, propertiesBySelector? : Selector, options? : any) : void;
    
        /**
         * Get the value of a previously stored key-path in a given scope.
         * @param scopeChain? - This describes a location in the document. It uses the same syntax as selectors, with each space-separated component representing one element.
         * @param keyPath? - A `.` separated string of keys to traverse in the properties.
         * @param options? - {Object}
         * Returns the property value or `` if none is found.
         */
        getPropertyValue(scopeChain? : any, keyPath? : string, options? : Object) : any;
    
        /**
         * Get *all* values for the given key-path in a given scope. 
         */
        getAll(scopeChain? : any, keyPath? : string, options? : any) : any;
    
        /**
         * Get *all* properties for a given source.
         * @param source? - {String}
         * Returns an {Object} in the format {scope: {property: value}}
         */
        propertiesForSource(source? : string) : Object;
    
        /**
         * Get *all* properties matching the given source and scopeSelector.
         * @param source? - {String}
         * @param scopeSelector? - {String} `scopeSelector` is matched exactly.
         */
        propertiesForSourceAndSelector(source? : string, scopeSelector? : string) : Selector;
    
        /**
         * Get *all* properties matching the given scopeSelector.
         * @param scopeSelector? - {String} `scopeSelector` is matched exactly.
         */
        propertiesForSelector(scopeSelector? : string) : Selector;
    
        /**
         * Remove all properties for a given source.
         * @param source? - {String} 
         */
        removePropertiesForSource(source? : string) : void;
    
        /**
         * Remove all properties for a given source.
         * @param source? - {String}
         * @param scopeSelector? - {String} `scopeSelector` is matched exactly. 
         */
        removePropertiesForSourceAndSelector(source? : string, scopeSelector? : string) : Selector;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        mergeMatchingPropertySets(propertySets? : PropertySet[]) : PropertySet[];
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        bustCache() : any;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        withCaching(cacheKey? : any, skipCache? : any, callback? : any) : any;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        addPropertySet(propertySet? : PropertySet) : PropertySet;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        parseScopeChain(scopeChain? : any) : any;
    
    }

    /**
     * Selector
     * This class was not documented by atomdoc, assume it is private. Use with caution.
     */
    class Selector {
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        static create(source? : any, options? : any) : any;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        static parsePseudoSelectors(selectorComponent? : any) : Selector[];
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        selector: Selector;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        constructor(selector? : Selector, options? : any);
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        matches(scopeChain? : any) : any;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        selectorComponentMatchesScope(selectorComponent? : any, scope? : any) : any;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        compare(other? : any) : any;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        isEqual(other? : boolean) : boolean;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        calculateSpecificity() : any;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        toString() : any;
    
    }

}
declare module "scoped-property-store" {
    export = ScopedPropertyStore.ScopedPropertyStore;
}
