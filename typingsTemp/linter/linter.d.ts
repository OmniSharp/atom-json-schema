// Type definitions for linter (v1.7.2)
// Project: https://github.com/AtomLinter/Linter
// Definitions by: david-driscoll <https://github.com/david-driscoll/>
// Definitions: https://github.com/borisyankov/DefinitelyTyped

// Generated by: https://github.com/david-driscoll/atom-typescript-generator
// Generation tool by david-driscoll <https://github.com/david-driscoll/>
declare module Linter {
    /**
     * Commands
     * This class was not documented by atomdoc, assume it is private. Use with caution.
     */
    class Commands {
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        linter: Linter;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        constructor(linter? : Linter);
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        togglePanel() : Atom.Panel;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        toggleLinter() : Linter;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        setBubbleTransparent() : void;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        setBubbleOpaque() : void;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        expandMultilineMessages() : string;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        collapseMultilineMessages() : string;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        lint() : any;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        getMessage(index? : any) : string;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        nextError() : any;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        previousError() : any;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        dispose() : void;
    
    }

    /**
     * EditorRegistry
     * This class was not documented by atomdoc, assume it is private. Use with caution.
     */
    class EditorRegistry {
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        constructor();
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        create(textEditor? : Atom.TextEditor) : any;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        forEach(callback? : any) : any;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        ofPath(path? : string) : string;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        ofTextEditor(editor? : any) : Atom.TextEditor;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        ofActiveTextEditor() : Atom.TextEditor;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        observe(callback : (any: any) => void) : EventKit.Disposable;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        dispose() : void;
    
    }

    /**
     * LinterRegistry
     * This class was not documented by atomdoc, assume it is private. Use with caution.
     */
    class LinterRegistry {
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        constructor();
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        getLinters() : Linter[];
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        hasLinter(linter? : Linter) : Linter;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        addLinter(linter? : Linter) : Linter;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        deleteLinter(linter? : Linter) : Linter;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        lint({ onChange, editorLinter } : { onChange? : any; editorLinter? : Linter }) : any;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        triggerLinter(linter? : Linter, editor? : any, scopes? : any) : Linter;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        onDidUpdateMessages(callback : Function /* needs to be defined */) : EventKit.Disposable;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        dispose() : void;
    
    }

    /**
     * LinterViews
     * This class was not documented by atomdoc, assume it is private. Use with caution.
     */
    class LinterViews {
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        linter: Linter;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        constructor(linter? : Linter);
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        render({ added, removed, messages } : { added? : any; removed? : any; messages? : string }) : any;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        notifyEditors({ added, removed } : { added? : any; removed? : any }) : any;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        notifyEditor(editorLinter? : Linter) : any;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        renderLineMessages(render? : any) : string;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        classifyMessages(messages? : string) : string;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        classifyMessagesByLine(messages? : string) : string;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        renderBubble() : any;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        renderBubbleContent(message? : string) : any;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        renderCount() : number;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        attachBottom(statusBar? : any) : any;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        removeBubble() : void;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        dispose() : void;
    
    }

    /**
     * Linter
     * This class was not documented by atomdoc, assume it is private. Use with caution.
     */
    class Linter {
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        state: any /* default */;
    
        /**
         * State is an object by default; never null or undefined 
         * This field or method was marked private by atomdoc. Use with caution.
         */
        constructor(state? : any);
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        addLinter(linter? : Linter) : Linter;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        deleteLinter(linter? : Linter) : Linter;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        hasLinter(linter? : Linter) : Linter;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        getLinters() : Linter[];
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        setMessages(linter? : Linter, messages? : string) : string;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        deleteMessages(linter? : Linter) : string;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        getMessages() : string;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        onDidUpdateMessages(callback : Function /* needs to be defined */) : EventKit.Disposable;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        getActiveEditorLinter() : Linter;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        getEditorLinter(editor? : any) : Linter;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        getEditorLinterByPath(path? : string) : string;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        eachEditorLinter(callback? : any) : Linter;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        observeEditorLinters(callback : (any: any) => void) : EventKit.Disposable;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        createEditorLinter(editor? : any) : Linter;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        deactivate() : void;
    
    }

    /**
     * BottomContainer
     * This class was not documented by atomdoc, assume it is private. Use with caution.
     */
    class BottomContainer /*extends HTMLElement*/ {
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        prepare(state? : any) : any;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        createdCallback() : any;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        attachedCallback() : any;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        detachedCallback() : any;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        setVisibility(value? : any) : void;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        getVisibility() : any;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        getTab(name? : string) : any;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        onDidChangeTab(callback : Function /* needs to be defined */) : EventKit.Disposable;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        onShouldTogglePanel(callback? : any) : Atom.Panel;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        setCount({ Project, File, Line } : { Project? : Atom.Project; File? : Pathwatcher.File; Line? : number }) : number;
    
        /**
         * This field or method was not documented by atomdoc, assume it is private. Use with caution.
         */
        updateTabs() : void;
    
    }

}
declare module "linter" {
    export = Linter.Linter;
}
