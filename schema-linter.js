'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.provider = undefined;

var _jsonSchemaService = require('./vscode/plugin/jsonSchemaService');

var _jsonParser = require('./vscode/plugin/jsonParser');

var Range = require('atom').Range;

var jsonSchemaService = new _jsonSchemaService.JSONSchemaService();
function getWordAt(str, pos) {
    var wordLocation = {
        start: pos,
        end: pos
    };
    if (str === undefined) {
        return wordLocation;
    }
    while (pos < str.length && /\W/.test(str[pos])) {
        ++pos;
    }
    var left = str.slice(0, pos + 1).search(/\W(?!.*\W)/);
    var right = str.slice(pos).search(/(\W|$)/);
    wordLocation.start = left + 1;
    wordLocation.end = wordLocation.start + right;
    return wordLocation;
}
function mapValues(editor, ranges, error) {
    var range = ranges[error.field.replace('data.', '')];
    if (!range) {
        return null;
    }
    var line = range.section.start[0];
    var column = range.section.start[1];
    var text = editor.lineTextForBufferRow(line);
    var level = 'error';
    return {
        type: level,
        text: error.field + ' - ' + error.message,
        filePath: editor.getPath(),
        line: line + 1,
        col: column + 1,
        range: new Range(range.value.start, range.value.end)
    };
}
var provider = exports.provider = [{
    grammarScopes: ['source.json'],
    scope: 'file',
    lintOnFly: true,
    lint: function lint(editor) {
        if (editor.getText().length === 0) {
            return Promise.resolve([]);
        }
        var jsonDocument = (0, _jsonParser.parse)(editor.getText());
        return jsonSchemaService.getSchemaForResource(editor.getURI(), jsonDocument).then(function (schema) {
            if (schema) {
                if (schema.errors.length && jsonDocument.root) {
                    var astRoot = jsonDocument.root;
                    var property = astRoot.type === 'object' ? astRoot.getFirstProperty('$schema') : null;
                    if (property) {
                        var node = property.value || property;
                        jsonDocument.warnings.push({ location: { start: node.start, end: node.end }, message: schema.errors[0] });
                    } else {
                        jsonDocument.warnings.push({ location: { start: astRoot.start, end: astRoot.start + 1 }, message: schema.errors[0] });
                    }
                } else {
                    jsonDocument.validate(schema.schema);
                }
            }
            var diagnostics = [];
            jsonDocument.errors.concat(jsonDocument.warnings).forEach(function (error, idx) {
                var signature = error.location.start + ' ' + error.location.end + ' ' + error.message;
                var location = editor.getBuffer().positionForCharacterIndex(error.location.start);
                diagnostics.push({
                    type: idx >= jsonDocument.errors.length ? "warning" : "error",
                    text: signature,
                    filePath: editor.getPath(),
                    line: location.row + 1,
                    col: location.column + 1,
                    range: new Range(error.location.start, error.location.end)
                });
            });
            return diagnostics;
        });
    }
}];
//# sourceMappingURL=data:application/json;base64,
